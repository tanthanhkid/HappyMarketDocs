#!/usr/bin/env node

/**
 * Script t·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ª•c l·ª•c cho danh m·ª•c BAI-HOC
 * Ch·∫°y script n√†y m·ªói khi c√≥ b√†i h·ªçc m·ªõi ƒë∆∞·ª£c t·∫°o
 */

const fs = require('fs').promises;
const path = require('path');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c BAI-HOC
const BAI_HOC_DIR = path.join(process.cwd(), 'content', 'BAI-HOC');
const INDEX_FILE = path.join(BAI_HOC_DIR, '_index.md');

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ b√†i h·ªçc t·ª´ th∆∞ m·ª•c BAI-HOC
 */
async function getAllLessons() {
    try {
        const items = await fs.readdir(BAI_HOC_DIR, { withFileTypes: true });
        const lessons = [];
        
        for (const item of items) {
            if (item.isDirectory() && item.name !== '_index.md') {
                const lessonPath = path.join(BAI_HOC_DIR, item.name, 'index.md');
                try {
                    const content = await fs.readFile(lessonPath, 'utf8');
                    const frontmatter = extractFrontmatter(content);
                    
                    if (frontmatter && frontmatter.title) {
                        lessons.push({
                            slug: item.name,
                            title: frontmatter.title,
                            description: frontmatter.description || '',
                            date: frontmatter.date || new Date().toISOString().split('T')[0],
                            weight: frontmatter.weight || 10,
                            tags: frontmatter.tags || [],
                            categories: frontmatter.categories || []
                        });
                    }
                } catch (error) {
                    console.warn(`Kh√¥ng th·ªÉ ƒë·ªçc file ${lessonPath}:`, error.message);
                }
            }
        }
        
        // S·∫Øp x·∫øp theo date (m·ªõi nh·∫•t tr∆∞·ªõc)
        return lessons.sort((a, b) => new Date(b.date) - new Date(a.date));
    } catch (error) {
        console.error('L·ªói khi ƒë·ªçc th∆∞ m·ª•c BAI-HOC:', error);
        return [];
    }
}

/**
 * Tr√≠ch xu·∫•t frontmatter t·ª´ n·ªôi dung markdown
 */
function extractFrontmatter(content) {
    const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
    if (!frontmatterMatch) return null;
    
    const frontmatterText = frontmatterMatch[1];
    const frontmatter = {};
    
    frontmatterText.split('\n').forEach(line => {
        const match = line.match(/^(\w+):\s*(.*)$/);
        if (match) {
            let value = match[2].trim();
            
            // X·ª≠ l√Ω c√°c gi√° tr·ªã ƒë·∫∑c bi·ªát
            if (value.startsWith('"') && value.endsWith('"')) {
                value = value.slice(1, -1);
            } else if (value.startsWith('[') && value.endsWith(']')) {
                value = value.slice(1, -1).split(',').map(v => v.trim().replace(/"/g, ''));
            }
            
            frontmatter[match[1]] = value;
        }
    });
    
    return frontmatter;
}

/**
 * T·∫°o n·ªôi dung m·ª•c l·ª•c t·ª´ danh s√°ch b√†i h·ªçc
 */
function generateTableOfContents(lessons) {
    if (lessons.length === 0) {
        return `## üìö Danh s√°ch b√†i h·ªçc

Hi·ªán t·∫°i ch∆∞a c√≥ b√†i h·ªçc n√†o ƒë∆∞·ª£c t·∫°o. H√£y s·ª≠ d·ª•ng [Admin Panel](/admin/tao-bai-hoc.html) ƒë·ªÉ t·∫°o b√†i h·ªçc ƒë·∫ßu ti√™n!`;
    }
    
    let toc = `## üìö Danh s√°ch b√†i h·ªçc

T·ªïng c·ªông c√≥ **${lessons.length}** b√†i h·ªçc ƒë∆∞·ª£c t·∫°o t·ª´ Admin Panel:

### üÜï B√†i h·ªçc m·ªõi nh·∫•t

`;
    
    // Hi·ªÉn th·ªã 5 b√†i h·ªçc m·ªõi nh·∫•t
    const recentLessons = lessons.slice(0, 5);
    recentLessons.forEach((lesson, index) => {
        const date = new Date(lesson.date).toLocaleDateString('vi-VN');
        toc += `${index + 1}. **[${lesson.title}](/bai-hoc/${lesson.slug}/)** - *${date}*\n`;
        if (lesson.description) {
            toc += `   ${lesson.description}\n`;
        }
        toc += '\n';
    });
    
    if (lessons.length > 5) {
        toc += `### üìñ T·∫•t c·∫£ b√†i h·ªçc

`;
        
        lessons.forEach((lesson, index) => {
            const date = new Date(lesson.date).toLocaleDateString('vi-VN');
            toc += `${index + 1}. **[${lesson.title}](/bai-hoc/${lesson.slug}/)** - *${date}*\n`;
            if (lesson.description) {
                toc += `   ${lesson.description}\n`;
            }
            toc += '\n';
        });
    }
    
    return toc;
}

/**
 * T·∫°o sidebar table of contents cho Hugo
 */
function generateSidebarToc(lessons) {
    if (lessons.length === 0) {
        return [];
    }
    
    const sidebarItems = [
        {
            name: "M·ª•c l·ª•c",
            url: "#m·ª•c-l·ª•c",
            weight: 1
        },
        {
            name: "Ngu·ªìn ki·∫øn th·ª©c", 
            url: "#ngu·ªìn-ki·∫øn-th·ª©c",
            weight: 2
        },
        {
            name: "C√°ch s·ª≠ d·ª•ng",
            url: "#c√°ch-s·ª≠-d·ª•ng", 
            weight: 3
        },
        {
            name: "C·∫≠p nh·∫≠t",
            url: "#c·∫≠p-nh·∫≠t",
            weight: 4
        },
        {
            name: "Danh s√°ch b√†i h·ªçc",
            url: "#danh-s√°ch-b√†i-h·ªçc",
            weight: 5
        }
    ];
    
    // Th√™m danh s√°ch b√†i h·ªçc v√†o sidebar
    lessons.forEach((lesson, index) => {
        sidebarItems.push({
            name: lesson.title,
            url: `/bai-hoc/${lesson.slug}/`,
            weight: 10 + index,
            parent: "Danh s√°ch b√†i h·ªçc"
        });
    });
    
    return sidebarItems;
}

/**
 * C·∫≠p nh·∫≠t file _index.md v·ªõi m·ª•c l·ª•c m·ªõi
 */
async function updateIndexFile(lessons) {
    const toc = generateTableOfContents(lessons);
    const sidebarToc = generateSidebarToc(lessons);
    
    const currentContent = await fs.readFile(INDEX_FILE, 'utf8');
    
    // T√¨m v√† thay th·∫ø ph·∫ßn m·ª•c l·ª•c
    const tocStart = currentContent.indexOf('## üìö Danh s√°ch b√†i h·ªçc');
    const tocEnd = currentContent.indexOf('---', tocStart);
    
    let newContent;
    if (tocStart !== -1 && tocEnd !== -1) {
        // Thay th·∫ø ph·∫ßn m·ª•c l·ª•c hi·ªán t·∫°i
        newContent = currentContent.substring(0, tocStart) + toc + '\n\n' + currentContent.substring(tocEnd);
    } else {
        // Th√™m m·ª•c l·ª•c v√†o cu·ªëi file
        newContent = currentContent + '\n\n' + toc;
    }
    
    // C·∫≠p nh·∫≠t frontmatter v·ªõi sidebar table of contents
    newContent = updateFrontmatterWithSidebar(newContent, sidebarToc);
    
    await fs.writeFile(INDEX_FILE, newContent, 'utf8');
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t m·ª•c l·ª•c BAI-HOC v·ªõi ${lessons.length} b√†i h·ªçc`);
}

/**
 * C·∫≠p nh·∫≠t frontmatter v·ªõi sidebar table of contents
 */
function updateFrontmatterWithSidebar(content, sidebarToc) {
    // T√¨m frontmatter
    const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
    if (!frontmatterMatch) return content;
    
    const frontmatterText = frontmatterMatch[1];
    const frontmatter = {};
    
    // Parse frontmatter hi·ªán t·∫°i
    frontmatterText.split('\n').forEach(line => {
        const match = line.match(/^(\w+):\s*(.*)$/);
        if (match) {
            let value = match[2].trim();
            if (value.startsWith('"') && value.endsWith('"')) {
                value = value.slice(1, -1);
            }
            frontmatter[match[1]] = value;
        }
    });
    
    // Th√™m sidebar table of contents
    frontmatter.sidebar = {
        tableOfContents: sidebarToc
    };
    
    // T·∫°o frontmatter m·ªõi
    let newFrontmatter = '---\n';
    Object.keys(frontmatter).forEach(key => {
        if (key === 'sidebar') {
            newFrontmatter += `sidebar:\n`;
            newFrontmatter += `  tableOfContents:\n`;
            sidebarToc.forEach(item => {
                newFrontmatter += `    - name: "${item.name}"\n`;
                newFrontmatter += `      url: "${item.url}"\n`;
                newFrontmatter += `      weight: ${item.weight}\n`;
                if (item.parent) {
                    newFrontmatter += `      parent: "${item.parent}"\n`;
                }
            });
        } else {
            newFrontmatter += `${key}: "${frontmatter[key]}"\n`;
        }
    });
    newFrontmatter += '---';
    
    // Thay th·∫ø frontmatter c≈©
    return content.replace(/^---\n[\s\S]*?\n---/, newFrontmatter);
}

/**
 * H√†m ch√≠nh
 */
async function main() {
    try {
        console.log('üîÑ ƒêang c·∫≠p nh·∫≠t m·ª•c l·ª•c BAI-HOC...');
        
        const lessons = await getAllLessons();
        await updateIndexFile(lessons);
        
        console.log('‚úÖ Ho√†n th√†nh c·∫≠p nh·∫≠t m·ª•c l·ª•c!');
        
        // Hi·ªÉn th·ªã th·ªëng k√™
        console.log('\nüìä Th·ªëng k√™:');
        console.log(`- T·ªïng s·ªë b√†i h·ªçc: ${lessons.length}`);
        if (lessons.length > 0) {
            const latestLesson = lessons[0];
            console.log(`- B√†i h·ªçc m·ªõi nh·∫•t: ${latestLesson.title}`);
            console.log(`- Ng√†y t·∫°o: ${new Date(latestLesson.date).toLocaleDateString('vi-VN')}`);
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t m·ª•c l·ª•c:', error);
        process.exit(1);
    }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    main();
}

module.exports = {
    getAllLessons,
    updateIndexFile,
    generateTableOfContents,
    generateSidebarToc,
    updateFrontmatterWithSidebar
};
